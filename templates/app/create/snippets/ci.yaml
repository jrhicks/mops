---
to: snippets/<%=app_name%>/ci.yaml
---
name: CI

on: [push]

jobs:
  cicd:
    runs-on: ubuntu-latest
    container:
      image: ruby:3.2.2

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1

      - name: Gem cache
        id: cache-bundle
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: bundle-${{ hashFiles('**/Gemfile.lock') }}

      - name: Bundle install
        env:
          RAILS_ENV: test
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3 --path vendor/bundle

      - name: Setup DB
        env:
          PGHOST: postgres
          PGUSER: postgres
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          RAILS_ENV: test
        run: |
          bin/rails db:create db:schema:load

      - name: Precompile assets
        run: bundle exec rails assets:precompile

      - name: Run tests
        env:
          PGHOST: postgres
          PGUSER: postgres
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          RAILS_ENV: test
        run: |
          bundle exec rspec

      - name: Install AWS CLI
        run: |
          curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install

      - name: Install Docker
        run: |
          apt-get update
          apt-get install -y docker.io

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: <%=aws_region%>

      - name: Get Build Number
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_RUN_NUMBER}

      - name: Authenticate Docker to Amazon ECR
        run: |
          aws ecr get-login-password --region <%=aws_region%> | docker login --username AWS --password-stdin <%=aws_account_id%>.dkr.ecr.<%=aws_region%>.amazonaws.com

      - name: Build, Tag & Push to ECR
        run: |
          docker build -t <%=repo_dasherized%>:${{ steps.get_version.outputs.VERSION }} .
          docker tag <%=repo_dasherized%>:${{ steps.get_version.outputs.VERSION }} <%=aws_account_id%>.dkr.ecr.<%=aws_region%>.amazonaws.com/<%=repo_dasherized%>:${{ steps.get_version.outputs.VERSION }}
          docker push <%=aws_account_id%>.dkr.ecr.<%=aws_region%>.amazonaws.com/<%=repo_dasherized%>:${{ steps.get_version.outputs.VERSION }}
